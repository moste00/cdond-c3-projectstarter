version: 2.1

commands:
  install-tar-and-gzip:
    description: Ensure tar and gzip exist
    parameters:
      command:
        default: yum
        description: The name of the command to be invoked for installation
        type: enum
        enum: ["apt","yum", "sudo apt"]
    steps:
      - run:
          name: Install tar with the provided command
          command: << parameters.command >> install -y tar 
      - run:
          name: Install gzip with the provided command
          command: << parameters.command >> install -y gzip
  
  install-ansible:
    description: Ensure Ansible exists
    parameters:
      command:
        default: yum
        description: The name of the command to be invoked for installation
        type: enum
        enum: ["apt","yum","sudo apt"]
    steps:
      - run:
          name: Install ssh using the provided installation command
          command: |
            << parameters.command >> install -y openssh
            << parameters.command >> install -y openssh-server
            << parameters.command >> install -y openssh-clients
      - run:
          name: Install python3 using the provided installation command
          command: << parameters.command >> install -y python3
      - run:
          name: Install Ansible using pip 
          command: python3 -m pip install --upgrade --user ansible 

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.workflow-ID >>" --recursive --region=us-east-1
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow-ID >>" --region=us-east-1
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow-ID >>"  --region=us-east-1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-ID:
        type: string   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure   https://kvdb.io/Mb3DPEDsLc87pT2n2PBqd1/migration_<< parameters.workflow-ID >>) 
            if(( $SUCCESS==1 )); 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test 
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test 
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [frontend-scan]
        - run:
            name: Front-end scan 
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-scan]
        - run:
            name: Back-end scan 
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
        - save_cache:
            paths: [backend/node_modules]
            key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-tar-and-gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=uda-people \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  --region=us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=uda-people \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --region=us-east-1 \
              >> ./.circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - install-tar-and-gzip
      - install-ansible
      - add_ssh_keys:
          fingerprints:
            - "e6:5f:a3:bc:ca:6d:78:60:6b:37:07:fd:c1:ea:44:c8"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure server
          command: |
            #This is to add Ansible's binary to the PATH, without this ALL Ansible Commands will error
            export PATH=$PATH:~/.local/bin
            cd .circleci/ansible
            mv /tmp/workspace/project/.circleci/ansible/inventory.txt ./inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"    

  run-migrations:
    docker:
      - image:  circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install aws-cli
          command: |
            sudo apt-get install -y python python-pip
            sudo pip install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to KV DB
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/Mb3DPEDsLc87pT2n2PBqd1/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install-tar-and-gzip:
          command: "sudo apt"
      - run:
          name: Install aws-cli
          command: |
            sudo apt-get install -y python python-pip
            sudo pip install awscli
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -n 1 /tmp/workspace/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive --region=us-east-1
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "e6:5f:a3:bc:ca:6d:78:60:6b:37:07:fd:c1:ea:44:c8"
      - install-tar-and-gzip:
          command: "sudo apt"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install ssh
          command: |
            sudo apt install -y openssh-server
            sudo apt install -y openssh-client
      - run:
          name: Install python3 and pip
          command: sudo apt install -y python3 ; sudo apt install python3-pip
      - run:
          name: Install aws-cli using pip
          command: python3 -m pip install --upgrade --user awscli 
      - run:
          name: Install Ansible using pip 
          command: python3 -m pip install --upgrade --user ansible 
      - run:
          name: Install the tool rsync to transfer the zipped artifacts from CI server to EC2 instance
          command: sudo apt install rsync
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir artifact
            mv artifact.tar.gz ./artifact/artifact.tar.gz
            cd .circleci/ansible
            mv /tmp/workspace/project/.circleci/ansible/inventory.txt ./inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  

  smoke-test:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - install-tar-and-gzip:
          command: "sudo apt"
      - run:
          name: Installing curl 
          command: sudo apt install curl
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Installing awscli
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -n 1 /tmp/workspace/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0 
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # - destroy-environment:
      #     workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      # - revert-migrations:
      #     workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
                        --template-file .circleci/files/cloudfront.yml \
                        --stack-name DeploymentStack \
                        --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --tags project=udapeople
      - destroy-environment:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow-ID: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cleanup:
    docker:
      - image: cimg/aws:2022.09
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                                      --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"

            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive --region=us-east-1
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" --region=us-east-1
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"  --region=us-east-1
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
         requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
         requires: [smoke-test]
      - cleanup:
         requires: [cloudfront-update]